openapi: 3.0.1
info:
  title: Kubernetes
  version: v1.27.5+k3s1
servers:
  - url: /
security:
  - BearerToken: []
paths:
  /apis/management.cattle.io/v3/clusterroletemplatebindings:
    get:
      tags:
        - managementCattleIo_v3
      description: list objects of kind ClusterRoleTemplateBinding
      operationId: listManagementCattleIoV3ClusterRoleTemplateBindingForAllNamespaces
      parameters:
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBindingList
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBindingList
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ClusterRoleTemplateBinding
        version: v3
  /apis/management.cattle.io/v3/globalrolebindings:
    get:
      tags:
        - managementCattleIo_v3
      description: list objects of kind GlobalRoleBinding
      operationId: listManagementCattleIoV3GlobalRoleBinding
      parameters:
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.GlobalRoleBindingList
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.GlobalRoleBindingList
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRoleBinding
        version: v3
    post:
      tags:
        - managementCattleIo_v3
      description: create a GlobalRoleBinding
      operationId: createManagementCattleIoV3GlobalRoleBinding
      parameters:
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint.
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
          application/yaml:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRoleBinding
        version: v3
      x-codegen-request-body-name: body
    delete:
      tags:
        - managementCattleIo_v3
      description: delete collection of GlobalRoleBinding
      operationId: deleteManagementCattleIoV3CollectionGlobalRoleBinding
      parameters:
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRoleBinding
        version: v3
  /apis/management.cattle.io/v3/globalrolebindings/{name}:
    get:
      tags:
        - managementCattleIo_v3
      description: read the specified GlobalRoleBinding
      operationId: readManagementCattleIoV3GlobalRoleBinding
      parameters:
        - name: name
          in: path
          description: name of the GlobalRoleBinding
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRoleBinding
        version: v3
    put:
      tags:
        - managementCattleIo_v3
      description: replace the specified GlobalRoleBinding
      operationId: replaceManagementCattleIoV3GlobalRoleBinding
      parameters:
        - name: name
          in: path
          description: name of the GlobalRoleBinding
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint.
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
          application/yaml:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRoleBinding
        version: v3
      x-codegen-request-body-name: body
    delete:
      tags:
        - managementCattleIo_v3
      description: delete a GlobalRoleBinding
      operationId: deleteManagementCattleIoV3GlobalRoleBinding
      parameters:
        - name: name
          in: path
          description: name of the GlobalRoleBinding
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: gracePeriodSeconds
          in: query
          description: >-
            The duration in seconds before the object should be deleted. Value
            must be non-negative integer. The value zero indicates delete
            immediately. If this value is nil, the default grace period for the
            specified type will be used. Defaults to a per object value if not
            specified. zero means delete immediately.
          schema:
            type: integer
        - name: orphanDependents
          in: query
          description: >-
            Deprecated: please use the PropagationPolicy, this field will be
            deprecated in 1.7. Should the dependent objects be orphaned. If
            true/false, the "orphan" finalizer will be added to/removed from the
            object's finalizers list. Either this field or PropagationPolicy may
            be set, but not both.
          schema:
            type: boolean
        - name: propagationPolicy
          in: query
          description: >-
            Whether and how garbage collection will be performed. Either this
            field or OrphanDependents may be set, but not both. The default
            policy is decided by the existing finalizer set in the
            metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions
          application/yaml:
            schema:
              $ref: >-
                #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRoleBinding
        version: v3
      x-codegen-request-body-name: body
    patch:
      tags:
        - managementCattleIo_v3
      description: partially update the specified GlobalRoleBinding
      operationId: patchManagementCattleIoV3GlobalRoleBinding
      parameters:
        - name: name
          in: path
          description: name of the GlobalRoleBinding
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint. This field is required for
            apply requests (application/apply-patch) but optional for non-apply
            patch types (JsonPatch, MergePatch, StrategicMergePatch).
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
        - name: force
          in: query
          description: >-
            Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
          schema:
            type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRoleBinding
        version: v3
      x-codegen-request-body-name: body
  /apis/management.cattle.io/v3/globalroles:
    get:
      tags:
        - managementCattleIo_v3
      description: list objects of kind GlobalRole
      operationId: listManagementCattleIoV3GlobalRole
      parameters:
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleList'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRole
        version: v3
    post:
      tags:
        - managementCattleIo_v3
      description: create a GlobalRole
      operationId: createManagementCattleIoV3GlobalRole
      parameters:
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint.
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
          application/yaml:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRole
        version: v3
      x-codegen-request-body-name: body
    delete:
      tags:
        - managementCattleIo_v3
      description: delete collection of GlobalRole
      operationId: deleteManagementCattleIoV3CollectionGlobalRole
      parameters:
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRole
        version: v3
  /apis/management.cattle.io/v3/globalroles/{name}:
    get:
      tags:
        - managementCattleIo_v3
      description: read the specified GlobalRole
      operationId: readManagementCattleIoV3GlobalRole
      parameters:
        - name: name
          in: path
          description: name of the GlobalRole
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRole
        version: v3
    put:
      tags:
        - managementCattleIo_v3
      description: replace the specified GlobalRole
      operationId: replaceManagementCattleIoV3GlobalRole
      parameters:
        - name: name
          in: path
          description: name of the GlobalRole
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint.
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
          application/yaml:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRole
        version: v3
      x-codegen-request-body-name: body
    delete:
      tags:
        - managementCattleIo_v3
      description: delete a GlobalRole
      operationId: deleteManagementCattleIoV3GlobalRole
      parameters:
        - name: name
          in: path
          description: name of the GlobalRole
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: gracePeriodSeconds
          in: query
          description: >-
            The duration in seconds before the object should be deleted. Value
            must be non-negative integer. The value zero indicates delete
            immediately. If this value is nil, the default grace period for the
            specified type will be used. Defaults to a per object value if not
            specified. zero means delete immediately.
          schema:
            type: integer
        - name: orphanDependents
          in: query
          description: >-
            Deprecated: please use the PropagationPolicy, this field will be
            deprecated in 1.7. Should the dependent objects be orphaned. If
            true/false, the "orphan" finalizer will be added to/removed from the
            object's finalizers list. Either this field or PropagationPolicy may
            be set, but not both.
          schema:
            type: boolean
        - name: propagationPolicy
          in: query
          description: >-
            Whether and how garbage collection will be performed. Either this
            field or OrphanDependents may be set, but not both. The default
            policy is decided by the existing finalizer set in the
            metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions
          application/yaml:
            schema:
              $ref: >-
                #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRole
        version: v3
      x-codegen-request-body-name: body
    patch:
      tags:
        - managementCattleIo_v3
      description: partially update the specified GlobalRole
      operationId: patchManagementCattleIoV3GlobalRole
      parameters:
        - name: name
          in: path
          description: name of the GlobalRole
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint. This field is required for
            apply requests (application/apply-patch) but optional for non-apply
            patch types (JsonPatch, MergePatch, StrategicMergePatch).
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
        - name: force
          in: query
          description: >-
            Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
          schema:
            type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: GlobalRole
        version: v3
      x-codegen-request-body-name: body
  /apis/management.cattle.io/v3/namespaces/{namespace}/clusterroletemplatebindings:
    get:
      tags:
        - managementCattleIo_v3
      description: list objects of kind ClusterRoleTemplateBinding
      operationId: listManagementCattleIoV3NamespacedClusterRoleTemplateBinding
      parameters:
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBindingList
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBindingList
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ClusterRoleTemplateBinding
        version: v3
    post:
      tags:
        - managementCattleIo_v3
      description: create a ClusterRoleTemplateBinding
      operationId: createManagementCattleIoV3NamespacedClusterRoleTemplateBinding
      parameters:
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint.
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
          application/yaml:
            schema:
              $ref: >-
                #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ClusterRoleTemplateBinding
        version: v3
      x-codegen-request-body-name: body
    delete:
      tags:
        - managementCattleIo_v3
      description: delete collection of ClusterRoleTemplateBinding
      operationId: deleteManagementCattleIoV3CollectionNamespacedClusterRoleTemplateBinding
      parameters:
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ClusterRoleTemplateBinding
        version: v3
  /apis/management.cattle.io/v3/namespaces/{namespace}/clusterroletemplatebindings/{name}:
    get:
      tags:
        - managementCattleIo_v3
      description: read the specified ClusterRoleTemplateBinding
      operationId: readManagementCattleIoV3NamespacedClusterRoleTemplateBinding
      parameters:
        - name: name
          in: path
          description: name of the ClusterRoleTemplateBinding
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ClusterRoleTemplateBinding
        version: v3
    put:
      tags:
        - managementCattleIo_v3
      description: replace the specified ClusterRoleTemplateBinding
      operationId: replaceManagementCattleIoV3NamespacedClusterRoleTemplateBinding
      parameters:
        - name: name
          in: path
          description: name of the ClusterRoleTemplateBinding
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint.
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
          application/yaml:
            schema:
              $ref: >-
                #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ClusterRoleTemplateBinding
        version: v3
      x-codegen-request-body-name: body
    delete:
      tags:
        - managementCattleIo_v3
      description: delete a ClusterRoleTemplateBinding
      operationId: deleteManagementCattleIoV3NamespacedClusterRoleTemplateBinding
      parameters:
        - name: name
          in: path
          description: name of the ClusterRoleTemplateBinding
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: gracePeriodSeconds
          in: query
          description: >-
            The duration in seconds before the object should be deleted. Value
            must be non-negative integer. The value zero indicates delete
            immediately. If this value is nil, the default grace period for the
            specified type will be used. Defaults to a per object value if not
            specified. zero means delete immediately.
          schema:
            type: integer
        - name: orphanDependents
          in: query
          description: >-
            Deprecated: please use the PropagationPolicy, this field will be
            deprecated in 1.7. Should the dependent objects be orphaned. If
            true/false, the "orphan" finalizer will be added to/removed from the
            object's finalizers list. Either this field or PropagationPolicy may
            be set, but not both.
          schema:
            type: boolean
        - name: propagationPolicy
          in: query
          description: >-
            Whether and how garbage collection will be performed. Either this
            field or OrphanDependents may be set, but not both. The default
            policy is decided by the existing finalizer set in the
            metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions
          application/yaml:
            schema:
              $ref: >-
                #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ClusterRoleTemplateBinding
        version: v3
      x-codegen-request-body-name: body
    patch:
      tags:
        - managementCattleIo_v3
      description: partially update the specified ClusterRoleTemplateBinding
      operationId: patchManagementCattleIoV3NamespacedClusterRoleTemplateBinding
      parameters:
        - name: name
          in: path
          description: name of the ClusterRoleTemplateBinding
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint. This field is required for
            apply requests (application/apply-patch) but optional for non-apply
            patch types (JsonPatch, MergePatch, StrategicMergePatch).
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
        - name: force
          in: query
          description: >-
            Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
          schema:
            type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ClusterRoleTemplateBinding
        version: v3
      x-codegen-request-body-name: body
  /apis/management.cattle.io/v3/namespaces/{namespace}/projectroletemplatebindings:
    get:
      tags:
        - managementCattleIo_v3
      description: list objects of kind ProjectRoleTemplateBinding
      operationId: listManagementCattleIoV3NamespacedProjectRoleTemplateBinding
      parameters:
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBindingList
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBindingList
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ProjectRoleTemplateBinding
        version: v3
    post:
      tags:
        - managementCattleIo_v3
      description: create a ProjectRoleTemplateBinding
      operationId: createManagementCattleIoV3NamespacedProjectRoleTemplateBinding
      parameters:
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint.
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
          application/yaml:
            schema:
              $ref: >-
                #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ProjectRoleTemplateBinding
        version: v3
      x-codegen-request-body-name: body
    delete:
      tags:
        - managementCattleIo_v3
      description: delete collection of ProjectRoleTemplateBinding
      operationId: deleteManagementCattleIoV3CollectionNamespacedProjectRoleTemplateBinding
      parameters:
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ProjectRoleTemplateBinding
        version: v3
  /apis/management.cattle.io/v3/namespaces/{namespace}/projectroletemplatebindings/{name}:
    get:
      tags:
        - managementCattleIo_v3
      description: read the specified ProjectRoleTemplateBinding
      operationId: readManagementCattleIoV3NamespacedProjectRoleTemplateBinding
      parameters:
        - name: name
          in: path
          description: name of the ProjectRoleTemplateBinding
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ProjectRoleTemplateBinding
        version: v3
    put:
      tags:
        - managementCattleIo_v3
      description: replace the specified ProjectRoleTemplateBinding
      operationId: replaceManagementCattleIoV3NamespacedProjectRoleTemplateBinding
      parameters:
        - name: name
          in: path
          description: name of the ProjectRoleTemplateBinding
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint.
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
          application/yaml:
            schema:
              $ref: >-
                #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ProjectRoleTemplateBinding
        version: v3
      x-codegen-request-body-name: body
    delete:
      tags:
        - managementCattleIo_v3
      description: delete a ProjectRoleTemplateBinding
      operationId: deleteManagementCattleIoV3NamespacedProjectRoleTemplateBinding
      parameters:
        - name: name
          in: path
          description: name of the ProjectRoleTemplateBinding
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: gracePeriodSeconds
          in: query
          description: >-
            The duration in seconds before the object should be deleted. Value
            must be non-negative integer. The value zero indicates delete
            immediately. If this value is nil, the default grace period for the
            specified type will be used. Defaults to a per object value if not
            specified. zero means delete immediately.
          schema:
            type: integer
        - name: orphanDependents
          in: query
          description: >-
            Deprecated: please use the PropagationPolicy, this field will be
            deprecated in 1.7. Should the dependent objects be orphaned. If
            true/false, the "orphan" finalizer will be added to/removed from the
            object's finalizers list. Either this field or PropagationPolicy may
            be set, but not both.
          schema:
            type: boolean
        - name: propagationPolicy
          in: query
          description: >-
            Whether and how garbage collection will be performed. Either this
            field or OrphanDependents may be set, but not both. The default
            policy is decided by the existing finalizer set in the
            metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions
          application/yaml:
            schema:
              $ref: >-
                #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ProjectRoleTemplateBinding
        version: v3
      x-codegen-request-body-name: body
    patch:
      tags:
        - managementCattleIo_v3
      description: partially update the specified ProjectRoleTemplateBinding
      operationId: patchManagementCattleIoV3NamespacedProjectRoleTemplateBinding
      parameters:
        - name: name
          in: path
          description: name of the ProjectRoleTemplateBinding
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint. This field is required for
            apply requests (application/apply-patch) but optional for non-apply
            patch types (JsonPatch, MergePatch, StrategicMergePatch).
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
        - name: force
          in: query
          description: >-
            Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
          schema:
            type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ProjectRoleTemplateBinding
        version: v3
      x-codegen-request-body-name: body
  /apis/management.cattle.io/v3/namespaces/{namespace}/projects:
    get:
      tags:
        - managementCattleIo_v3
      description: list objects of kind Project
      operationId: listManagementCattleIoV3NamespacedProject
      parameters:
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.ProjectList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.ProjectList'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: Project
        version: v3
    post:
      tags:
        - managementCattleIo_v3
      description: create a Project
      operationId: createManagementCattleIoV3NamespacedProject
      parameters:
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint.
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.Project'
          application/yaml:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.Project'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: Project
        version: v3
      x-codegen-request-body-name: body
    delete:
      tags:
        - managementCattleIo_v3
      description: delete collection of Project
      operationId: deleteManagementCattleIoV3CollectionNamespacedProject
      parameters:
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: Project
        version: v3
  /apis/management.cattle.io/v3/namespaces/{namespace}/projects/{name}:
    get:
      tags:
        - managementCattleIo_v3
      description: read the specified Project
      operationId: readManagementCattleIoV3NamespacedProject
      parameters:
        - name: name
          in: path
          description: name of the Project
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: Project
        version: v3
    put:
      tags:
        - managementCattleIo_v3
      description: replace the specified Project
      operationId: replaceManagementCattleIoV3NamespacedProject
      parameters:
        - name: name
          in: path
          description: name of the Project
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint.
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.Project'
          application/yaml:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.Project'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: Project
        version: v3
      x-codegen-request-body-name: body
    delete:
      tags:
        - managementCattleIo_v3
      description: delete a Project
      operationId: deleteManagementCattleIoV3NamespacedProject
      parameters:
        - name: name
          in: path
          description: name of the Project
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: gracePeriodSeconds
          in: query
          description: >-
            The duration in seconds before the object should be deleted. Value
            must be non-negative integer. The value zero indicates delete
            immediately. If this value is nil, the default grace period for the
            specified type will be used. Defaults to a per object value if not
            specified. zero means delete immediately.
          schema:
            type: integer
        - name: orphanDependents
          in: query
          description: >-
            Deprecated: please use the PropagationPolicy, this field will be
            deprecated in 1.7. Should the dependent objects be orphaned. If
            true/false, the "orphan" finalizer will be added to/removed from the
            object's finalizers list. Either this field or PropagationPolicy may
            be set, but not both.
          schema:
            type: boolean
        - name: propagationPolicy
          in: query
          description: >-
            Whether and how garbage collection will be performed. Either this
            field or OrphanDependents may be set, but not both. The default
            policy is decided by the existing finalizer set in the
            metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions
          application/yaml:
            schema:
              $ref: >-
                #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: Project
        version: v3
      x-codegen-request-body-name: body
    patch:
      tags:
        - managementCattleIo_v3
      description: partially update the specified Project
      operationId: patchManagementCattleIoV3NamespacedProject
      parameters:
        - name: name
          in: path
          description: name of the Project
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: object name and auth scope, such as for teams and projects
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint. This field is required for
            apply requests (application/apply-patch) but optional for non-apply
            patch types (JsonPatch, MergePatch, StrategicMergePatch).
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
        - name: force
          in: query
          description: >-
            Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
          schema:
            type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.Project'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: Project
        version: v3
      x-codegen-request-body-name: body
  /apis/management.cattle.io/v3/projectroletemplatebindings:
    get:
      tags:
        - managementCattleIo_v3
      description: list objects of kind ProjectRoleTemplateBinding
      operationId: listManagementCattleIoV3ProjectRoleTemplateBindingForAllNamespaces
      parameters:
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBindingList
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBindingList
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: ProjectRoleTemplateBinding
        version: v3
  /apis/management.cattle.io/v3/projects:
    get:
      tags:
        - managementCattleIo_v3
      description: list objects of kind Project
      operationId: listManagementCattleIoV3ProjectForAllNamespaces
      parameters:
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.ProjectList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.ProjectList'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: Project
        version: v3
  /apis/management.cattle.io/v3/roletemplates:
    get:
      tags:
        - managementCattleIo_v3
      description: list objects of kind RoleTemplate
      operationId: listManagementCattleIoV3RoleTemplate
      parameters:
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplateList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplateList'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: RoleTemplate
        version: v3
    post:
      tags:
        - managementCattleIo_v3
      description: create a RoleTemplate
      operationId: createManagementCattleIoV3RoleTemplate
      parameters:
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint.
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
          application/yaml:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: RoleTemplate
        version: v3
      x-codegen-request-body-name: body
    delete:
      tags:
        - managementCattleIo_v3
      description: delete collection of RoleTemplate
      operationId: deleteManagementCattleIoV3CollectionRoleTemplate
      parameters:
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: allowWatchBookmarks
          in: query
          description: >-
            allowWatchBookmarks requests watch events with type "BOOKMARK".
            Servers that do not implement bookmarks may ignore this flag and
            bookmarks are sent at the server's discretion. Clients should not
            assume bookmarks are returned at any specific interval, nor may they
            assume the server will send any BOOKMARK event during a session. If
            this is not a watch, this field is ignored.
          schema:
            type: boolean
        - name: continue
          in: query
          description: >-
            The continue option should be set when retrieving more results from
            the server. Since this value is server defined, clients may only use
            the continue value from a previous query result with identical query
            parameters (except for the value of continue) and the server may
            reject a continue value it does not recognize. If the specified
            continue value is no longer valid whether due to expiration
            (generally five to fifteen minutes) or a configuration change on the
            server, the server will respond with a 410 ResourceExpired error
            together with a continue token. If the client needs a consistent
            list, it must restart their list without the continue field.
            Otherwise, the client may send another list request with the token
            received with the 410 error, the server will respond with a list
            starting from the next key, but from the latest snapshot, which is
            inconsistent from the previous list results - objects that are
            created, modified, or deleted after the first list request will be
            included in the response, as long as their keys are after the "next
            key".


            This field is not supported when watch is true. Clients may start a
            watch from the last resourceVersion value returned by the server and
            not miss any modifications.
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their fields.
            Defaults to everything.
          schema:
            type: string
        - name: labelSelector
          in: query
          description: >-
            A selector to restrict the list of returned objects by their labels.
            Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            limit is a maximum number of responses to return for a list call. If
            more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true.


            The server guarantees that the objects returned when using continue
            will be identical to issuing a single list call without a limit -
            that is, no objects created, modified, or deleted after the first
            request is issued will be included in any subsequent continued
            requests. This is sometimes referred to as a consistent snapshot,
            and ensures that a client that is using limit to receive smaller
            chunks of a very large result can ensure they see all possible
            objects. If objects are updated during a chunked list the version of
            the object that was present at the time the first list result was
            calculated is returned.
          schema:
            type: integer
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: resourceVersionMatch
          in: query
          description: >-
            resourceVersionMatch determines how resourceVersion is applied to
            list calls. It is highly recommended that resourceVersionMatch be
            set for list calls where resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
        - name: sendInitialEvents
          in: query
          description: >-
            `sendInitialEvents=true` may be set together with `watch=true`. In
            that case, the watch stream will begin with synthetic events to
            produce the current state of objects in the collection. Once all
            such events have been sent, a synthetic "Bookmark" event  will be
            sent. The bookmark will report the ResourceVersion (RV)
            corresponding to the set of objects, and be marked with
            `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the
            watch stream will proceed as usual, sending watch events
            corresponding to changes (subsequent to the RV) to objects watched.


            When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan
              is interpreted as "data at least as new as the provided `resourceVersion`"
              and the bookmark event is send when the state is synced
              to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
              If `resourceVersion` is unset, this is interpreted as "consistent read" and the
              bookmark event is send when the state is synced at least to the moment
              when request started being processed.
            - `resourceVersionMatch` set to any other value or unset
              Invalid error is returned.

            Defaults to true if `resourceVersion=""` or `resourceVersion="0"`
            (for backward compatibility reasons) and to false otherwise.
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          description: >-
            Timeout for the list/watch call. This limits the duration of the
            call, regardless of any activity or inactivity.
          schema:
            type: integer
        - name: watch
          in: query
          description: >-
            Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: RoleTemplate
        version: v3
  /apis/management.cattle.io/v3/roletemplates/{name}:
    get:
      tags:
        - managementCattleIo_v3
      description: read the specified RoleTemplate
      operationId: readManagementCattleIoV3RoleTemplate
      parameters:
        - name: name
          in: path
          description: name of the RoleTemplate
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: resourceVersion
          in: query
          description: >-
            resourceVersion sets a constraint on what resource versions a
            request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details.


            Defaults to unset
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: RoleTemplate
        version: v3
    put:
      tags:
        - managementCattleIo_v3
      description: replace the specified RoleTemplate
      operationId: replaceManagementCattleIoV3RoleTemplate
      parameters:
        - name: name
          in: path
          description: name of the RoleTemplate
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint.
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
          application/yaml:
            schema:
              $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: RoleTemplate
        version: v3
      x-codegen-request-body-name: body
    delete:
      tags:
        - managementCattleIo_v3
      description: delete a RoleTemplate
      operationId: deleteManagementCattleIoV3RoleTemplate
      parameters:
        - name: name
          in: path
          description: name of the RoleTemplate
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: gracePeriodSeconds
          in: query
          description: >-
            The duration in seconds before the object should be deleted. Value
            must be non-negative integer. The value zero indicates delete
            immediately. If this value is nil, the default grace period for the
            specified type will be used. Defaults to a per object value if not
            specified. zero means delete immediately.
          schema:
            type: integer
        - name: orphanDependents
          in: query
          description: >-
            Deprecated: please use the PropagationPolicy, this field will be
            deprecated in 1.7. Should the dependent objects be orphaned. If
            true/false, the "orphan" finalizer will be added to/removed from the
            object's finalizers list. Either this field or PropagationPolicy may
            be set, but not both.
          schema:
            type: boolean
        - name: propagationPolicy
          in: query
          description: >-
            Whether and how garbage collection will be performed. Either this
            field or OrphanDependents may be set, but not both. The default
            policy is decided by the existing finalizer set in the
            metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions
          application/yaml:
            schema:
              $ref: >-
                #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
            application/yaml:
              schema:
                $ref: >-
                  #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: RoleTemplate
        version: v3
      x-codegen-request-body-name: body
    patch:
      tags:
        - managementCattleIo_v3
      description: partially update the specified RoleTemplate
      operationId: patchManagementCattleIoV3RoleTemplate
      parameters:
        - name: name
          in: path
          description: name of the RoleTemplate
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
        - name: dryRun
          in: query
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          schema:
            type: string
        - name: fieldManager
          in: query
          description: >-
            fieldManager is a name associated with the actor or entity that is
            making these changes. The value must be less than or 128 characters
            long, and only contain printable characters, as defined by
            https://golang.org/pkg/unicode/#IsPrint. This field is required for
            apply requests (application/apply-patch) but optional for non-apply
            patch types (JsonPatch, MergePatch, StrategicMergePatch).
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: >-
            fieldValidation instructs the server on how to handle objects in the
            request (POST/PUT/PATCH) containing unknown or duplicate fields.
            Valid values are: - Ignore: This will ignore any unknown fields that
            are silently dropped from the object, and will ignore all but the
            last duplicate field that the decoder encounters. This is the
            default behavior prior to v1.23. - Warn: This will send a warning
            via the standard warning response header for each unknown field that
            is dropped from the object, and for each duplicate field that is
            encountered. The request will still succeed if there are no other
            errors, and will only persist the last of any duplicate fields. This
            is the default in v1.23+ - Strict: This will fail the request with a
            BadRequest error if any unknown fields would be dropped from the
            object, or if any duplicate fields are present. The error returned
            from the server will contain all unknown and duplicate fields
            encountered.
          schema:
            type: string
        - name: force
          in: query
          description: >-
            Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
          schema:
            type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
        '401':
          description: Unauthorized
          content: {}
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.cattle.io
        kind: RoleTemplate
        version: v3
      x-codegen-request-body-name: body
components:
  schemas:
    io.cattle.management.v3.ClusterRoleTemplateBinding:
      required:
        - clusterName
        - roleTemplateName
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        clusterName:
          type: string
          description: >-
            ClusterName is the metadata.name of the cluster to which a subject
            is added. Must match the namespace. Immutable.
        groupName:
          type: string
          description: >-
            GroupName is the name of the group subject added to the cluster.
            Immutable.
        groupPrincipalName:
          type: string
          description: >-
            GroupPrincipalName is the name of the group principal subject added
            to the cluster. Immutable.
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        roleTemplateName:
          type: string
          description: >-
            RoleTemplateName is the name of the role template that defines
            permissions to perform actions on resources in the cluster.
            Immutable.
        userName:
          type: string
          description: >-
            UserName is the name of the user subject added to the cluster.
            Immutable.
        userPrincipalName:
          type: string
          description: >-
            UserPrincipalName is the name of the user principal subject added to
            the cluster. Immutable.
      description: >-
        ClusterRoleTemplateBinding is the object representing membership of a
        subject in a cluster with permissions specified by a given role
        template.
      x-kubernetes-group-version-kind:
        - group: management.cattle.io
          kind: ClusterRoleTemplateBinding
          version: v3
    io.cattle.management.v3.ClusterRoleTemplateBindingList:
      required:
        - items
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        items:
          type: array
          description: >-
            List of clusterroletemplatebindings. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
          items:
            $ref: >-
              #/components/schemas/io.cattle.management.v3.ClusterRoleTemplateBinding
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: ClusterRoleTemplateBindingList is a list of ClusterRoleTemplateBinding
      x-kubernetes-group-version-kind:
        - group: management.cattle.io
          kind: ClusterRoleTemplateBindingList
          version: v3
    io.cattle.management.v3.GlobalRole:
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        builtin:
          type: boolean
          description: >-
            Builtin specifies that this GlobalRole was created by Rancher if
            true. Immutable.
        description:
          type: string
          description: Description holds text that describes the resource.
        displayName:
          type: string
          description: >-
            DisplayName is the human-readable name displayed in the UI for this
            resource.
        inheritedClusterRoles:
          type: array
          description: >-
            InheritedClusterRoles are the names of RoleTemplates whose
            permissions are granted by this GlobalRole in every cluster besides
            the local cluster. To grant permissions in the local cluster, use
            the Rules field.
          items:
            type: string
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        newUserDefault:
          type: boolean
          description: >-
            NewUserDefault specifies that all new users created should be bound
            to this GlobalRole if true.
        rules:
          type: array
          description: >-
            Rules holds a list of PolicyRules that are applied to the local
            cluster only.
          items:
            required:
              - verbs
            type: object
            properties:
              apiGroups:
                type: array
                description: >-
                  APIGroups is the name of the APIGroup that contains the
                  resources.  If multiple API groups are specified, any action
                  requested against one of the enumerated resources in any API
                  group will be allowed. "" represents the core API group and
                  "*" represents all API groups.
                items:
                  type: string
              nonResourceURLs:
                type: array
                description: >-
                  NonResourceURLs is a set of partial urls that a user should
                  have access to.  *s are allowed, but only as the full, final
                  step in the path Since non-resource URLs are not namespaced,
                  this field is only applicable for ClusterRoles referenced from
                  a ClusterRoleBinding. Rules can either apply to API resources
                  (such as "pods" or "secrets") or non-resource URL paths (such
                  as "/api"),  but not both.
                items:
                  type: string
              resourceNames:
                type: array
                description: >-
                  ResourceNames is an optional white list of names that the rule
                  applies to.  An empty set means that everything is allowed.
                items:
                  type: string
              resources:
                type: array
                description: >-
                  Resources is a list of resources this rule applies to. '*'
                  represents all resources.
                items:
                  type: string
              verbs:
                type: array
                description: >-
                  Verbs is a list of Verbs that apply to ALL the ResourceKinds
                  contained in this rule. '*' represents all verbs.
                items:
                  type: string
            description: >-
              PolicyRule holds information that describes a policy rule, but
              does not contain information about who the rule applies to or
              which namespace the rule applies to.
      description: >-
        GlobalRole defines rules that can be applied to the local cluster and or
        every downstream cluster.
      x-kubernetes-group-version-kind:
        - group: management.cattle.io
          kind: GlobalRole
          version: v3
    io.cattle.management.v3.GlobalRoleBinding:
      required:
        - globalRoleName
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        globalRoleName:
          type: string
          description: >-
            GlobalRoleName is the name of the Global Role that the subject will
            be bound to. Immutable.
        groupPrincipalName:
          type: string
          description: >-
            GroupPrincipalName is the name of the group principal subject to be
            bound. Immutable.
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        userName:
          type: string
          description: UserName is the name of the user subject to be bound. Immutable.
      description: GlobalRoleBinding binds a given subject user or group to a GlobalRole.
      x-kubernetes-group-version-kind:
        - group: management.cattle.io
          kind: GlobalRoleBinding
          version: v3
    io.cattle.management.v3.GlobalRoleBindingList:
      required:
        - items
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        items:
          type: array
          description: >-
            List of globalrolebindings. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
          items:
            $ref: '#/components/schemas/io.cattle.management.v3.GlobalRoleBinding'
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: GlobalRoleBindingList is a list of GlobalRoleBinding
      x-kubernetes-group-version-kind:
        - group: management.cattle.io
          kind: GlobalRoleBindingList
          version: v3
    io.cattle.management.v3.GlobalRoleList:
      required:
        - items
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        items:
          type: array
          description: >-
            List of globalroles. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
          items:
            $ref: '#/components/schemas/io.cattle.management.v3.GlobalRole'
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: GlobalRoleList is a list of GlobalRole
      x-kubernetes-group-version-kind:
        - group: management.cattle.io
          kind: GlobalRoleList
          version: v3
    io.cattle.management.v3.Project:
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          required:
            - clusterName
            - displayName
          type: object
          properties:
            clusterName:
              type: string
              description: >-
                ClusterName is the name of the cluster the project belongs to.
                Immutable.
            containerDefaultResourceLimit:
              type: object
              properties:
                limitsCpu:
                  type: string
                  description: >-
                    LimitsCPU is the CPU limits across all pods in a
                    non-terminal state.
                limitsMemory:
                  type: string
                  description: >-
                    LimitsMemory is the memory limits across all pods in a
                    non-terminal state.
                requestsCpu:
                  type: string
                  description: >-
                    RequestsCPU is the CPU requests limit across all pods in a
                    non-terminal state.
                requestsMemory:
                  type: string
                  description: >-
                    RequestsMemory is the memory requests limit across all pods
                    in a non-terminal state.
              description: >-
                ContainerDefaultResourceLimit is a specification for the default
                LimitRange for the namespace. See
                https://kubernetes.io/docs/concepts/policy/limit-range/ for more
                details.
            description:
              type: string
              description: Description is a human-readable description of the project.
            displayName:
              type: string
              description: DisplayName is the human-readable name for the project.
            enableProjectMonitoring:
              type: boolean
              description: >-
                EnableProjectMonitoring indicates whether Monitoring V1 should
                be enabled for this project. Deprecated. Use the Monitoring V2
                app instead. Defaults to false.
            namespaceDefaultResourceQuota:
              type: object
              properties:
                limit:
                  type: object
                  properties:
                    configMaps:
                      type: string
                      description: >-
                        ConfigMaps is the total number of ReplicationControllers
                        that can exist in the namespace.
                    limitsCpu:
                      type: string
                      description: >-
                        LimitsCPU is the CPU limits across all pods in a
                        non-terminal state.
                    limitsMemory:
                      type: string
                      description: >-
                        LimitsMemory is the memory limits across all pods in a
                        non-terminal state.
                    persistentVolumeClaims:
                      type: string
                      description: >-
                        PersistentVolumeClaims is the total number of
                        PersistentVolumeClaims that can exist in the namespace.
                    pods:
                      type: string
                      description: >-
                        Pods is the total number of Pods in a non-terminal state
                        that can exist in the namespace. A pod is in a terminal
                        state if .status.phase in (Failed, Succeeded) is true.
                    replicationControllers:
                      type: string
                      description: >-
                        ReplicationControllers is total number of
                        ReplicationControllers that can exist in the namespace.
                    requestsCpu:
                      type: string
                      description: >-
                        RequestsCPU is the CPU requests limit across all pods in
                        a non-terminal state.
                    requestsMemory:
                      type: string
                      description: >-
                        RequestsMemory is the memory requests limit across all
                        pods in a non-terminal state.
                    requestsStorage:
                      type: string
                      description: >-
                        RequestsStorage is the storage requests limit across all
                        persistent volume claims.
                    secrets:
                      type: string
                      description: >-
                        Secrets is the total number of ReplicationControllers
                        that can exist in the namespace.
                    services:
                      type: string
                      description: >-
                        Services is the total number of Services that can exist
                        in the namespace.
                    servicesLoadBalancers:
                      type: string
                      description: >-
                        ServicesLoadBalancers is the total number of Services of
                        type LoadBalancer that can exist in the namespace.
                    servicesNodePorts:
                      type: string
                      description: >-
                        ServiceNodePorts is the total number of Services of type
                        NodePort that can exist in the namespace.
                  description: Limit is the default quota limits applied to new namespaces.
              description: >-
                NamespaceDefaultResourceQuota is a specification of the default
                ResourceQuota that a namespace will receive if none is provided.
                Must provide ResourceQuota if NamespaceDefaultResourceQuota is
                specified. See
                https://kubernetes.io/docs/concepts/policy/resource-quotas/ for
                more details.
            resourceQuota:
              type: object
              properties:
                limit:
                  type: object
                  properties:
                    configMaps:
                      type: string
                      description: >-
                        ConfigMaps is the total number of ReplicationControllers
                        that can exist in the namespace.
                    limitsCpu:
                      type: string
                      description: >-
                        LimitsCPU is the CPU limits across all pods in a
                        non-terminal state.
                    limitsMemory:
                      type: string
                      description: >-
                        LimitsMemory is the memory limits across all pods in a
                        non-terminal state.
                    persistentVolumeClaims:
                      type: string
                      description: >-
                        PersistentVolumeClaims is the total number of
                        PersistentVolumeClaims that can exist in the namespace.
                    pods:
                      type: string
                      description: >-
                        Pods is the total number of Pods in a non-terminal state
                        that can exist in the namespace. A pod is in a terminal
                        state if .status.phase in (Failed, Succeeded) is true.
                    replicationControllers:
                      type: string
                      description: >-
                        ReplicationControllers is total number of
                        ReplicationControllers that can exist in the namespace.
                    requestsCpu:
                      type: string
                      description: >-
                        RequestsCPU is the CPU requests limit across all pods in
                        a non-terminal state.
                    requestsMemory:
                      type: string
                      description: >-
                        RequestsMemory is the memory requests limit across all
                        pods in a non-terminal state.
                    requestsStorage:
                      type: string
                      description: >-
                        RequestsStorage is the storage requests limit across all
                        persistent volume claims.
                    secrets:
                      type: string
                      description: >-
                        Secrets is the total number of ReplicationControllers
                        that can exist in the namespace.
                    services:
                      type: string
                      description: >-
                        Services is the total number of Services that can exist
                        in the namespace.
                    servicesLoadBalancers:
                      type: string
                      description: >-
                        ServicesLoadBalancers is the total number of Services of
                        type LoadBalancer that can exist in the namespace.
                    servicesNodePorts:
                      type: string
                      description: >-
                        ServiceNodePorts is the total number of Services of type
                        NodePort that can exist in the namespace.
                  description: >-
                    Limit is the total allowable quota limits shared by all
                    namespaces in the project.
                usedLimit:
                  type: object
                  properties:
                    configMaps:
                      type: string
                      description: >-
                        ConfigMaps is the total number of ReplicationControllers
                        that can exist in the namespace.
                    limitsCpu:
                      type: string
                      description: >-
                        LimitsCPU is the CPU limits across all pods in a
                        non-terminal state.
                    limitsMemory:
                      type: string
                      description: >-
                        LimitsMemory is the memory limits across all pods in a
                        non-terminal state.
                    persistentVolumeClaims:
                      type: string
                      description: >-
                        PersistentVolumeClaims is the total number of
                        PersistentVolumeClaims that can exist in the namespace.
                    pods:
                      type: string
                      description: >-
                        Pods is the total number of Pods in a non-terminal state
                        that can exist in the namespace. A pod is in a terminal
                        state if .status.phase in (Failed, Succeeded) is true.
                    replicationControllers:
                      type: string
                      description: >-
                        ReplicationControllers is total number of
                        ReplicationControllers that can exist in the namespace.
                    requestsCpu:
                      type: string
                      description: >-
                        RequestsCPU is the CPU requests limit across all pods in
                        a non-terminal state.
                    requestsMemory:
                      type: string
                      description: >-
                        RequestsMemory is the memory requests limit across all
                        pods in a non-terminal state.
                    requestsStorage:
                      type: string
                      description: >-
                        RequestsStorage is the storage requests limit across all
                        persistent volume claims.
                    secrets:
                      type: string
                      description: >-
                        Secrets is the total number of ReplicationControllers
                        that can exist in the namespace.
                    services:
                      type: string
                      description: >-
                        Services is the total number of Services that can exist
                        in the namespace.
                    servicesLoadBalancers:
                      type: string
                      description: >-
                        ServicesLoadBalancers is the total number of Services of
                        type LoadBalancer that can exist in the namespace.
                    servicesNodePorts:
                      type: string
                      description: >-
                        ServiceNodePorts is the total number of Services of type
                        NodePort that can exist in the namespace.
                  description: >-
                    UsedLimit is the currently allocated quota for all
                    namespaces in the project.
              description: >-
                ResourceQuota is a specification for the total amount of quota
                for standard resources that will be shared by all namespaces in
                the project. Must provide NamespaceDefaultResourceQuota if
                ResourceQuota is specified. See
                https://kubernetes.io/docs/concepts/policy/resource-quotas/ for
                more details.
          description: >-
            Spec is the specification of the desired configuration for the
            project.
        status:
          type: object
          properties:
            conditions:
              type: array
              description: Conditions are a set of indicators about aspects of the project.
              items:
                required:
                  - status
                  - type
                type: object
                properties:
                  lastTransitionTime:
                    type: string
                    description: >-
                      Last time the condition transitioned from one status to
                      another.
                  lastUpdateTime:
                    type: string
                    description: The last time this condition was updated.
                  message:
                    type: string
                    description: >-
                      Human-readable message indicating details about last
                      transition.
                  reason:
                    type: string
                    description: The reason for the condition's last transition.
                  status:
                    type: string
                    description: Status of the condition, one of True, False, Unknown.
                  type:
                    type: string
                    description: Type of project condition.
                description: ProjectCondition is the status of an aspect of the project.
            monitoringStatus:
              type: object
              properties:
                conditions:
                  type: array
                  items:
                    required:
                      - status
                      - type
                    type: object
                    properties:
                      lastTransitionTime:
                        type: string
                        description: >-
                          Last time the condition transitioned from one status
                          to another.
                      lastUpdateTime:
                        type: string
                        description: The last time this condition was updated.
                      message:
                        type: string
                        description: >-
                          Human-readable message indicating details about last
                          transition
                      reason:
                        type: string
                        description: The reason for the condition's last transition.
                      status:
                        type: string
                        description: Status of the condition, one of True, False, Unknown.
                      type:
                        type: string
                        description: Type of cluster condition.
                grafanaEndpoint:
                  type: string
              description: MonitoringStatus is the status of the Monitoring V1 app.
            podSecurityPolicyTemplateId:
              type: string
              description: >-
                PodSecurityPolicyTemplateName is the pod security policy
                template associated with the project.
          description: Status is the most recently observed status of the project.
      description: >-
        Project is a group of namespaces. Projects are used to create a
        multi-tenant environment within a Kubernetes cluster by managing
        namespace operations, such as role assignments or quotas, as a group.
      x-kubernetes-group-version-kind:
        - group: management.cattle.io
          kind: Project
          version: v3
    io.cattle.management.v3.ProjectList:
      required:
        - items
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        items:
          type: array
          description: >-
            List of projects. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
          items:
            $ref: '#/components/schemas/io.cattle.management.v3.Project'
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: ProjectList is a list of Project
      x-kubernetes-group-version-kind:
        - group: management.cattle.io
          kind: ProjectList
          version: v3
    io.cattle.management.v3.ProjectRoleTemplateBinding:
      required:
        - projectName
        - roleTemplateName
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        groupName:
          type: string
          description: >-
            GroupName is the name of the group subject added to the project.
            Immutable.
        groupPrincipalName:
          type: string
          description: >-
            GroupPrincipalName is the name of the group principal subject added
            to the project. Immutable.
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        projectName:
          type: string
          description: >-
            ProjectName is the name of the project to which a subject is added.
            Immutable.
        roleTemplateName:
          type: string
          description: >-
            RoleTemplateName is the name of the role template that defines
            permissions to perform actions on resources in the project.
            Immutable.
        serviceAccount:
          type: string
          description: >-
            ServiceAccount is the name of the service account bound as a
            subject. Immutable. Deprecated.
        userName:
          type: string
          description: >-
            UserName is the name of the user subject added to the project.
            Immutable.
        userPrincipalName:
          type: string
          description: >-
            UserPrincipalName is the name of the user principal subject added to
            the project. Immutable.
      description: >-
        ProjectRoleTemplateBinding is the object representing membership of a
        subject in a project with permissions specified by a given role
        template.
      x-kubernetes-group-version-kind:
        - group: management.cattle.io
          kind: ProjectRoleTemplateBinding
          version: v3
    io.cattle.management.v3.ProjectRoleTemplateBindingList:
      required:
        - items
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        items:
          type: array
          description: >-
            List of projectroletemplatebindings. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
          items:
            $ref: >-
              #/components/schemas/io.cattle.management.v3.ProjectRoleTemplateBinding
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: ProjectRoleTemplateBindingList is a list of ProjectRoleTemplateBinding
      x-kubernetes-group-version-kind:
        - group: management.cattle.io
          kind: ProjectRoleTemplateBindingList
          version: v3
    io.cattle.management.v3.RoleTemplate:
      type: object
      properties:
        administrative:
          type: boolean
          description: >-
            Administrative if false, and context is set to cluster this
            RoleTemplate will not grant access to "CatalogTemplates" and
            "CatalogTemplateVersions" for any project in the cluster. Default is
            false.
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        builtin:
          type: boolean
          description: >-
            Builtin if true specifies that this RoleTemplate was created by
            Rancher and is immutable. Default to false.
        clusterCreatorDefault:
          type: boolean
          description: >-
            ClusterCreatorDefault if true, a binding with this RoleTemplate will
            be created for a users when they create a new cluster.
            ClusterCreatorDefault is only evaluated if the context of the
            RoleTemplate is set to cluster. Default to false.
        context:
          type: string
          description: >-
            Context describes if the roleTemplate applies to clusters or
            projects. Valid values are "project", "cluster" or "".
          enum:
            - project
            - cluster
            - ''
        description:
          type: string
          description: Description holds text that describes the resource.
        displayName:
          type: string
          description: >-
            DisplayName is the human-readable name displayed in the UI for this
            resource.
        external:
          type: boolean
          description: >-
            External if true specifies that rules for this RoleTemplate should
            be gathered from a ClusterRole with the matching name. If set to
            true the Rules on the template will not be evaluated. External's
            value is only evaluated if the RoleTemplate's context is set to
            "cluster" Default to false.
        hidden:
          type: boolean
          description: >-
            Hidden if true informs the Rancher UI not to display this
            RoleTemplate. Default to false.
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        locked:
          type: boolean
          description: >-
            Locked if true, new bindings will not be able to use this
            RoleTemplate. Default to false.
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        projectCreatorDefault:
          type: boolean
          description: >-
            ProjectCreatorDefault if true, a binding with this RoleTemplate will
            be created for a user when they create a new project.
            ProjectCreatorDefault is only evaluated if the context of the
            RoleTemplate is set to project. Default to false.
        roleTemplateNames:
          type: array
          description: >-
            RoleTemplateNames list of RoleTemplate names that this RoleTemplate
            will inherit. This RoleTemplate will grant all rules defined in an
            inherited RoleTemplate. Inherited RoleTemplates must already exist.
          items:
            type: string
        rules:
          type: array
          description: Rules hold all the PolicyRules for this RoleTemplate.
          items:
            required:
              - verbs
            type: object
            properties:
              apiGroups:
                type: array
                description: >-
                  APIGroups is the name of the APIGroup that contains the
                  resources.  If multiple API groups are specified, any action
                  requested against one of the enumerated resources in any API
                  group will be allowed. "" represents the core API group and
                  "*" represents all API groups.
                items:
                  type: string
              nonResourceURLs:
                type: array
                description: >-
                  NonResourceURLs is a set of partial urls that a user should
                  have access to.  *s are allowed, but only as the full, final
                  step in the path Since non-resource URLs are not namespaced,
                  this field is only applicable for ClusterRoles referenced from
                  a ClusterRoleBinding. Rules can either apply to API resources
                  (such as "pods" or "secrets") or non-resource URL paths (such
                  as "/api"),  but not both.
                items:
                  type: string
              resourceNames:
                type: array
                description: >-
                  ResourceNames is an optional white list of names that the rule
                  applies to.  An empty set means that everything is allowed.
                items:
                  type: string
              resources:
                type: array
                description: >-
                  Resources is a list of resources this rule applies to. '*'
                  represents all resources.
                items:
                  type: string
              verbs:
                type: array
                description: >-
                  Verbs is a list of Verbs that apply to ALL the ResourceKinds
                  contained in this rule. '*' represents all verbs.
                items:
                  type: string
            description: >-
              PolicyRule holds information that describes a policy rule, but
              does not contain information about who the rule applies to or
              which namespace the rule applies to.
      description: >-
        RoleTemplate holds configuration for a template that is used to create
        kubernetes Roles and ClusterRoles (in the rbac.authorization.k8s.io
        group) for a cluster or project.
      x-kubernetes-group-version-kind:
        - group: management.cattle.io
          kind: RoleTemplate
          version: v3
    io.cattle.management.v3.RoleTemplateList:
      required:
        - items
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        items:
          type: array
          description: >-
            List of roletemplates. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
          items:
            $ref: '#/components/schemas/io.cattle.management.v3.RoleTemplate'
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: RoleTemplateList is a list of RoleTemplate
      x-kubernetes-group-version-kind:
        - group: management.cattle.io
          kind: RoleTemplateList
          version: v3
    io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions:
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        dryRun:
          type: array
          description: >-
            When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error
            response and no further processing of the request. Valid values are:
            - All: all dry run stages will be processed
          items:
            type: string
        gracePeriodSeconds:
          type: integer
          description: >-
            The duration in seconds before the object should be deleted. Value
            must be non-negative integer. The value zero indicates delete
            immediately. If this value is nil, the default grace period for the
            specified type will be used. Defaults to a per object value if not
            specified. zero means delete immediately.
          format: int64
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        orphanDependents:
          type: boolean
          description: >-
            Deprecated: please use the PropagationPolicy, this field will be
            deprecated in 1.7. Should the dependent objects be orphaned. If
            true/false, the "orphan" finalizer will be added to/removed from the
            object's finalizers list. Either this field or PropagationPolicy may
            be set, but not both.
        preconditions:
          $ref: >-
            #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions
        propagationPolicy:
          type: string
          description: >-
            Whether and how garbage collection will be performed. Either this
            field or OrphanDependents may be set, but not both. The default
            policy is decided by the existing finalizer set in the
            metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
      description: DeleteOptions may be provided when deleting an API object.
      x-kubernetes-group-version-kind:
        - group: ''
          kind: DeleteOptions
          version: v1
        - group: admission.k8s.io
          kind: DeleteOptions
          version: v1
        - group: admission.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: admissionregistration.k8s.io
          kind: DeleteOptions
          version: v1
        - group: admissionregistration.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: admissionregistration.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: apiextensions.k8s.io
          kind: DeleteOptions
          version: v1
        - group: apiextensions.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: apiregistration.k8s.io
          kind: DeleteOptions
          version: v1
        - group: apiregistration.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: apps
          kind: DeleteOptions
          version: v1
        - group: apps
          kind: DeleteOptions
          version: v1beta1
        - group: apps
          kind: DeleteOptions
          version: v1beta2
        - group: authentication.k8s.io
          kind: DeleteOptions
          version: v1
        - group: authentication.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: authentication.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: authorization.k8s.io
          kind: DeleteOptions
          version: v1
        - group: authorization.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: autoscaling
          kind: DeleteOptions
          version: v1
        - group: autoscaling
          kind: DeleteOptions
          version: v2
        - group: autoscaling
          kind: DeleteOptions
          version: v2beta1
        - group: autoscaling
          kind: DeleteOptions
          version: v2beta2
        - group: batch
          kind: DeleteOptions
          version: v1
        - group: batch
          kind: DeleteOptions
          version: v1beta1
        - group: certificates.k8s.io
          kind: DeleteOptions
          version: v1
        - group: certificates.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: certificates.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: coordination.k8s.io
          kind: DeleteOptions
          version: v1
        - group: coordination.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: discovery.k8s.io
          kind: DeleteOptions
          version: v1
        - group: discovery.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: events.k8s.io
          kind: DeleteOptions
          version: v1
        - group: events.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: extensions
          kind: DeleteOptions
          version: v1beta1
        - group: flowcontrol.apiserver.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: flowcontrol.apiserver.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: flowcontrol.apiserver.k8s.io
          kind: DeleteOptions
          version: v1beta2
        - group: flowcontrol.apiserver.k8s.io
          kind: DeleteOptions
          version: v1beta3
        - group: imagepolicy.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: internal.apiserver.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: networking.k8s.io
          kind: DeleteOptions
          version: v1
        - group: networking.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: networking.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: node.k8s.io
          kind: DeleteOptions
          version: v1
        - group: node.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: node.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: policy
          kind: DeleteOptions
          version: v1
        - group: policy
          kind: DeleteOptions
          version: v1beta1
        - group: rbac.authorization.k8s.io
          kind: DeleteOptions
          version: v1
        - group: rbac.authorization.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: rbac.authorization.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: resource.k8s.io
          kind: DeleteOptions
          version: v1alpha2
        - group: scheduling.k8s.io
          kind: DeleteOptions
          version: v1
        - group: scheduling.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: scheduling.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: storage.k8s.io
          kind: DeleteOptions
          version: v1
        - group: storage.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: storage.k8s.io
          kind: DeleteOptions
          version: v1beta1
    io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1:
      type: object
      description: >-
        FieldsV1 stores a set of fields in a data structure like a Trie, in JSON
        format.


        Each key is either a '.' representing the field itself, and will always
        map to an empty set, or a string representing a sub-field or item. The
        string will follow one of these four formats: 'f:<name>', where <name>
        is the name of a field in a struct, or key in a map 'v:<value>', where
        <value> is the exact json formatted value of a list item 'i:<index>',
        where <index> is position of a item in a list 'k:<keys>', where <keys>
        is a map of  a list item's key fields to their unique values If a key
        maps to an empty Fields value, the field that key represents is part of
        the set.


        The exact format is defined in sigs.k8s.io/structured-merge-diff
    io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta:
      type: object
      properties:
        continue:
          type: string
          description: >-
            continue may be set if the user set a limit on the number of items
            returned, and indicates that the server has more data available. The
            value is opaque and may be used to issue another request to the
            endpoint that served this list to retrieve the next set of available
            objects. Continuing a consistent list may not be possible if the
            server configuration has changed or more than a few minutes have
            passed. The resourceVersion field returned when using this continue
            value will be identical to the value in the first response, unless
            you have received this token from an error message.
        remainingItemCount:
          type: integer
          description: >-
            remainingItemCount is the number of subsequent items in the list
            which are not included in this list response. If the list request
            contained label or field selectors, then the number of remaining
            items is unknown and the field will be left unset and omitted during
            serialization. If the list is complete (either because it is not
            chunking or because this is the last chunk), then there are no more
            remaining items and this field will be left unset and omitted during
            serialization. Servers older than v1.15 do not set this field. The
            intended use of the remainingItemCount is *estimating* the size of a
            collection. Clients should not rely on the remainingItemCount to be
            set or to be exact.
          format: int64
        resourceVersion:
          type: string
          description: >-
            String that identifies the server's internal version of this object
            that can be used by clients to determine when objects have changed.
            Value must be treated as opaque by clients and passed unmodified
            back to the server. Populated by the system. Read-only. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        selfLink:
          type: string
          description: >-
            Deprecated: selfLink is a legacy read-only field that is no longer
            populated by the system.
      description: >-
        ListMeta describes metadata that synthetic resources must have,
        including lists and various status objects. A resource may have only one
        of {ObjectMeta, ListMeta}.
    io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry:
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the version of this resource that this field set
            applies to. The format is "group/version" just like the top-level
            APIVersion field. It is necessary to track the version of a field
            set because it cannot be automatically converted.
        fieldsType:
          type: string
          description: >-
            FieldsType is the discriminator for the different fields format and
            version. There is currently only one possible value: "FieldsV1"
        fieldsV1:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1'
        manager:
          type: string
          description: Manager is an identifier of the workflow managing these fields.
        operation:
          type: string
          description: >-
            Operation is the type of operation which lead to this
            ManagedFieldsEntry being created. The only valid values for this
            field are 'Apply' and 'Update'.
        subresource:
          type: string
          description: >-
            Subresource is the name of the subresource used to update that
            object, or empty string if the object was updated through the main
            resource. The value of this field is used to distinguish between
            managers, even if they share the same name. For example, a status
            update will be distinct from a regular update using the same manager
            name. Note that the APIVersion field is not related to the
            Subresource field and it always corresponds to the version of the
            main resource.
        time:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description: >-
        ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of
        the resource that the fieldset applies to.
    io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
          description: >-
            Annotations is an unstructured key value map stored with a resource
            that may be set by external tools to store and retrieve arbitrary
            metadata. They are not queryable and should be preserved when
            modifying objects. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
        creationTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        deletionGracePeriodSeconds:
          type: integer
          description: >-
            Number of seconds allowed for this object to gracefully terminate
            before it will be removed from the system. Only set when
            deletionTimestamp is also set. May only be shortened. Read-only.
          format: int64
        deletionTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        finalizers:
          type: array
          description: >-
            Must be empty before the object is deleted from the registry. Each
            entry is an identifier for the responsible component that will
            remove the entry from the list. If the deletionTimestamp of the
            object is non-nil, entries in this list can only be removed.
            Finalizers may be processed and removed in any order.  Order is NOT
            enforced because it introduces significant risk of stuck finalizers.
            finalizers is a shared field, any actor with permission can reorder
            it. If the finalizer list is processed in order, then this can lead
            to a situation in which the component responsible for the first
            finalizer in the list is waiting for a signal (field value, external
            system, or other) produced by a component responsible for a
            finalizer later in the list, resulting in a deadlock. Without
            enforced ordering finalizers are free to order amongst themselves
            and are not vulnerable to ordering changes in the list.
          items:
            type: string
          x-kubernetes-patch-strategy: merge
        generateName:
          type: string
          description: >-
            GenerateName is an optional prefix, used by the server, to generate
            a unique name ONLY IF the Name field has not been provided. If this
            field is used, the name returned to the client will be different
            than the name passed. This value will also be combined with a unique
            suffix. The provided value has the same validation rules as the Name
            field, and may be truncated by the length of the suffix required to
            make the value unique on the server.


            If this field is specified and the generated name exists, the server
            will return a 409.


            Applied only if Name is not specified. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
        generation:
          type: integer
          description: >-
            A sequence number representing a specific generation of the desired
            state. Populated by the system. Read-only.
          format: int64
        labels:
          type: object
          additionalProperties:
            type: string
          description: >-
            Map of string keys and values that can be used to organize and
            categorize (scope and select) objects. May match selectors of
            replication controllers and services. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
        managedFields:
          type: array
          description: >-
            ManagedFields maps workflow-id and version to the set of fields that
            are managed by that workflow. This is mostly for internal
            housekeeping, and users typically shouldn't need to set or
            understand this field. A workflow can be the user's name, a
            controller's name, or the name of a specific apply path like
            "ci-cd". The set of fields is always in the version that the
            workflow used when modifying the object.
          items:
            $ref: >-
              #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
        name:
          type: string
          description: >-
            Name must be unique within a namespace. Is required when creating
            resources, although some resources may allow a client to request the
            generation of an appropriate name automatically. Name is primarily
            intended for creation idempotence and configuration definition.
            Cannot be updated. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
        namespace:
          type: string
          description: >-
            Namespace defines the space within which each name must be unique.
            An empty namespace is equivalent to the "default" namespace, but
            "default" is the canonical representation. Not all objects are
            required to be scoped to a namespace - the value of this field for
            those objects will be empty.


            Must be a DNS_LABEL. Cannot be updated. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
        ownerReferences:
          type: array
          description: >-
            List of objects depended by this object. If ALL objects in the list
            have been deleted, this object will be garbage collected. If this
            object is managed by a controller, then an entry in this list will
            point to this controller, with the controller field set to true.
            There cannot be more than one managing controller.
          items:
            $ref: >-
              #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: uid
        resourceVersion:
          type: string
          description: >-
            An opaque value that represents the internal version of this object
            that can be used by clients to determine when objects have changed.
            May be used for optimistic concurrency, change detection, and the
            watch operation on a resource or set of resources. Clients must
            treat these values as opaque and passed unmodified back to the
            server. They may only be valid for a particular resource or set of
            resources.


            Populated by the system. Read-only. Value must be treated as opaque
            by clients and . More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        selfLink:
          type: string
          description: >-
            Deprecated: selfLink is a legacy read-only field that is no longer
            populated by the system.
        uid:
          type: string
          description: >-
            UID is the unique in time and space value for this object. It is
            typically generated by the server on successful creation of a
            resource and is not allowed to change on PUT operations.


            Populated by the system. Read-only. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
      description: >-
        ObjectMeta is metadata that all persisted resources must have, which
        includes all objects users must create.
    io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference:
      required:
        - apiVersion
        - kind
        - name
        - uid
      type: object
      properties:
        apiVersion:
          type: string
          description: API version of the referent.
        blockOwnerDeletion:
          type: boolean
          description: >-
            If true, AND if the owner has the "foregroundDeletion" finalizer,
            then the owner cannot be deleted from the key-value store until this
            reference is removed. See
            https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
            for how the garbage collector interacts with this field and enforces
            the foreground deletion. Defaults to false. To set this field, a
            user needs "delete" permission of the owner, otherwise 422
            (Unprocessable Entity) will be returned.
        controller:
          type: boolean
          description: If true, this reference points to the managing controller.
        kind:
          type: string
          description: >-
            Kind of the referent. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        name:
          type: string
          description: >-
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
        uid:
          type: string
          description: >-
            UID of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
      description: >-
        OwnerReference contains enough information to let you identify an owning
        object. An owning object must be in the same namespace as the dependent,
        or be cluster-scoped, so there is no namespace field.
      x-kubernetes-map-type: atomic
    io.k8s.apimachinery.pkg.apis.meta.v1.Patch:
      type: object
      description: >-
        Patch is provided to give a concrete name and type to the Kubernetes
        PATCH request body.
    io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions:
      type: object
      properties:
        resourceVersion:
          type: string
          description: Specifies the target ResourceVersion
        uid:
          type: string
          description: Specifies the target UID.
      description: >-
        Preconditions must be fulfilled before an operation (update, delete,
        etc.) is carried out.
    io.k8s.apimachinery.pkg.apis.meta.v1.Status:
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        code:
          type: integer
          description: Suggested HTTP return code for this status, 0 if not set.
          format: int32
        details:
          $ref: >-
            #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails
        kind:
          type: string
          description: >-
            Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        message:
          type: string
          description: A human-readable description of the status of this operation.
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        reason:
          type: string
          description: >-
            A machine-readable description of why this operation is in the
            "Failure" status. If this value is empty there is no information
            available. A Reason clarifies an HTTP status code but does not
            override it.
        status:
          type: string
          description: >-
            Status of the operation. One of: "Success" or "Failure". More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
      description: Status is a return value for calls that don't return other objects.
      x-kubernetes-group-version-kind:
        - group: ''
          kind: Status
          version: v1
        - group: resource.k8s.io
          kind: Status
          version: v1alpha2
    io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause:
      type: object
      properties:
        field:
          type: string
          description: >-
            The field of the resource that has caused this error, as named by
            its JSON serialization. May include dot and postfix notation for
            nested attributes. Arrays are zero-indexed.  Fields may appear more
            than once in an array of causes due to fields having multiple
            errors. Optional.


            Examples:
              "name" - the field "name" on the current resource
              "items[0].name" - the field "name" on the first array entry in "items"
        message:
          type: string
          description: >-
            A human-readable description of the cause of the error.  This field
            may be presented as-is to a reader.
        reason:
          type: string
          description: >-
            A machine-readable description of the cause of the error. If this
            value is empty there is no information available.
      description: >-
        StatusCause provides more information about an api.Status failure,
        including cases when multiple errors are encountered.
    io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails:
      type: object
      properties:
        causes:
          type: array
          description: >-
            The Causes array includes more details associated with the
            StatusReason failure. Not all StatusReasons may provide detailed
            causes.
          items:
            $ref: >-
              #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause
        group:
          type: string
          description: >-
            The group attribute of the resource associated with the status
            StatusReason.
        kind:
          type: string
          description: >-
            The kind attribute of the resource associated with the status
            StatusReason. On some operations may differ from the requested
            resource Kind. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        name:
          type: string
          description: >-
            The name attribute of the resource associated with the status
            StatusReason (when there is a single name which can be described).
        retryAfterSeconds:
          type: integer
          description: >-
            If specified, the time in seconds before the operation should be
            retried. Some errors may indicate the client must take an alternate
            action - for those errors this field may indicate how long to wait
            before taking the alternate action.
          format: int32
        uid:
          type: string
          description: >-
            UID of the resource. (when there is a single resource which can be
            described). More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
      description: >-
        StatusDetails is a set of additional properties that MAY be set by the
        server to provide additional information about a response. The Reason
        field of a Status object defines what attributes will be set. Clients
        must ignore fields that do not match the defined type of each attribute,
        and should assume that any attribute may be empty, invalid, or under
        defined.
    io.k8s.apimachinery.pkg.apis.meta.v1.Time:
      type: string
      description: >-
        Time is a wrapper around time.Time which supports correct marshaling to
        YAML and JSON.  Wrappers are provided for many of the factory methods
        that the time package offers.
      format: date-time
  securitySchemes:
    BearerToken:
      type: apiKey
      description: Bearer Token authentication
      name: authorization
      in: header
x-original-swagger-version: '2.0'
